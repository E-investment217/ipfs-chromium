// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_dag.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_5fdag_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_5fdag_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_5fdag_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_5fdag_2eproto {
  static const uint32_t offsets[];
};
namespace ipfs {
namespace pb_dag {
class PBLink;
struct PBLinkDefaultTypeInternal;
extern PBLinkDefaultTypeInternal _PBLink_default_instance_;
class PBNode;
struct PBNodeDefaultTypeInternal;
extern PBNodeDefaultTypeInternal _PBNode_default_instance_;
}  // namespace pb_dag
}  // namespace ipfs
PROTOBUF_NAMESPACE_OPEN
template<> ::ipfs::pb_dag::PBLink* Arena::CreateMaybeMessage<::ipfs::pb_dag::PBLink>(Arena*);
template<> ::ipfs::pb_dag::PBNode* Arena::CreateMaybeMessage<::ipfs::pb_dag::PBNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ipfs {
namespace pb_dag {

// ===================================================================

class PBLink final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipfs.pb_dag.PBLink) */ {
 public:
  inline PBLink() : PBLink(nullptr) {}
  ~PBLink() override;
  explicit PROTOBUF_CONSTEXPR PBLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBLink(const PBLink& from);
  PBLink(PBLink&& from) noexcept
    : PBLink() {
    *this = ::std::move(from);
  }

  inline PBLink& operator=(const PBLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBLink& operator=(PBLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PBLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBLink* internal_default_instance() {
    return reinterpret_cast<const PBLink*>(
               &_PBLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBLink& a, PBLink& b) {
    a.Swap(&b);
  }
  inline void Swap(PBLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBLink>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PBLink& from);
  void MergeFrom(const PBLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBLink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs.pb_dag.PBLink";
  }
  protected:
  explicit PBLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kNameFieldNumber = 2,
    kTsizeFieldNumber = 3,
  };
  // optional bytes Hash = 1;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // optional string Name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 Tsize = 3;
  bool has_tsize() const;
  private:
  bool _internal_has_tsize() const;
  public:
  void clear_tsize();
  uint64_t tsize() const;
  void set_tsize(uint64_t value);
  private:
  uint64_t _internal_tsize() const;
  void _internal_set_tsize(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ipfs.pb_dag.PBLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t tsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pb_5fdag_2eproto;
};
// -------------------------------------------------------------------

class PBNode final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipfs.pb_dag.PBNode) */ {
 public:
  inline PBNode() : PBNode(nullptr) {}
  ~PBNode() override;
  explicit PROTOBUF_CONSTEXPR PBNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBNode(const PBNode& from);
  PBNode(PBNode&& from) noexcept
    : PBNode() {
    *this = ::std::move(from);
  }

  inline PBNode& operator=(const PBNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBNode& operator=(PBNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PBNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBNode* internal_default_instance() {
    return reinterpret_cast<const PBNode*>(
               &_PBNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PBNode& a, PBNode& b) {
    a.Swap(&b);
  }
  inline void Swap(PBNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBNode>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PBNode& from);
  void MergeFrom(const PBNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipfs.pb_dag.PBNode";
  }
  protected:
  explicit PBNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 2,
    kDataFieldNumber = 1,
  };
  // repeated .ipfs.pb_dag.PBLink Links = 2;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::ipfs::pb_dag::PBLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs::pb_dag::PBLink >*
      mutable_links();
  private:
  const ::ipfs::pb_dag::PBLink& _internal_links(int index) const;
  ::ipfs::pb_dag::PBLink* _internal_add_links();
  public:
  const ::ipfs::pb_dag::PBLink& links(int index) const;
  ::ipfs::pb_dag::PBLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs::pb_dag::PBLink >&
      links() const;

  // optional bytes Data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:ipfs.pb_dag.PBNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs::pb_dag::PBLink > links_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pb_5fdag_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBLink

// optional bytes Hash = 1;
inline bool PBLink::_internal_has_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBLink::has_hash() const {
  return _internal_has_hash();
}
inline void PBLink::clear_hash() {
  _impl_.hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBLink::hash() const {
  // @@protoc_insertion_point(field_get:ipfs.pb_dag.PBLink.Hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBLink::set_hash(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ipfs.pb_dag.PBLink.Hash)
}
inline std::string* PBLink::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:ipfs.pb_dag.PBLink.Hash)
  return _s;
}
inline const std::string& PBLink::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void PBLink::_internal_set_hash(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* PBLink::_internal_mutable_hash() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* PBLink::release_hash() {
  // @@protoc_insertion_point(field_release:ipfs.pb_dag.PBLink.Hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.hash_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBLink::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ipfs.pb_dag.PBLink.Hash)
}

// optional string Name = 2;
inline bool PBLink::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBLink::has_name() const {
  return _internal_has_name();
}
inline void PBLink::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PBLink::name() const {
  // @@protoc_insertion_point(field_get:ipfs.pb_dag.PBLink.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBLink::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ipfs.pb_dag.PBLink.Name)
}
inline std::string* PBLink::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ipfs.pb_dag.PBLink.Name)
  return _s;
}
inline const std::string& PBLink::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PBLink::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PBLink::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PBLink::release_name() {
  // @@protoc_insertion_point(field_release:ipfs.pb_dag.PBLink.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBLink::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ipfs.pb_dag.PBLink.Name)
}

// optional uint64 Tsize = 3;
inline bool PBLink::_internal_has_tsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PBLink::has_tsize() const {
  return _internal_has_tsize();
}
inline void PBLink::clear_tsize() {
  _impl_.tsize_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t PBLink::_internal_tsize() const {
  return _impl_.tsize_;
}
inline uint64_t PBLink::tsize() const {
  // @@protoc_insertion_point(field_get:ipfs.pb_dag.PBLink.Tsize)
  return _internal_tsize();
}
inline void PBLink::_internal_set_tsize(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.tsize_ = value;
}
inline void PBLink::set_tsize(uint64_t value) {
  _internal_set_tsize(value);
  // @@protoc_insertion_point(field_set:ipfs.pb_dag.PBLink.Tsize)
}

// -------------------------------------------------------------------

// PBNode

// repeated .ipfs.pb_dag.PBLink Links = 2;
inline int PBNode::_internal_links_size() const {
  return _impl_.links_.size();
}
inline int PBNode::links_size() const {
  return _internal_links_size();
}
inline void PBNode::clear_links() {
  _impl_.links_.Clear();
}
inline ::ipfs::pb_dag::PBLink* PBNode::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:ipfs.pb_dag.PBNode.Links)
  return _impl_.links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs::pb_dag::PBLink >*
PBNode::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:ipfs.pb_dag.PBNode.Links)
  return &_impl_.links_;
}
inline const ::ipfs::pb_dag::PBLink& PBNode::_internal_links(int index) const {
  return _impl_.links_.Get(index);
}
inline const ::ipfs::pb_dag::PBLink& PBNode::links(int index) const {
  // @@protoc_insertion_point(field_get:ipfs.pb_dag.PBNode.Links)
  return _internal_links(index);
}
inline ::ipfs::pb_dag::PBLink* PBNode::_internal_add_links() {
  return _impl_.links_.Add();
}
inline ::ipfs::pb_dag::PBLink* PBNode::add_links() {
  ::ipfs::pb_dag::PBLink* _add = _internal_add_links();
  // @@protoc_insertion_point(field_add:ipfs.pb_dag.PBNode.Links)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipfs::pb_dag::PBLink >&
PBNode::links() const {
  // @@protoc_insertion_point(field_list:ipfs.pb_dag.PBNode.Links)
  return _impl_.links_;
}

// optional bytes Data = 1;
inline bool PBNode::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBNode::has_data() const {
  return _internal_has_data();
}
inline void PBNode::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBNode::data() const {
  // @@protoc_insertion_point(field_get:ipfs.pb_dag.PBNode.Data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBNode::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ipfs.pb_dag.PBNode.Data)
}
inline std::string* PBNode::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ipfs.pb_dag.PBNode.Data)
  return _s;
}
inline const std::string& PBNode::_internal_data() const {
  return _impl_.data_.Get();
}
inline void PBNode::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* PBNode::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* PBNode::release_data() {
  // @@protoc_insertion_point(field_release:ipfs.pb_dag.PBNode.Data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBNode::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ipfs.pb_dag.PBNode.Data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_dag
}  // namespace ipfs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_5fdag_2eproto
